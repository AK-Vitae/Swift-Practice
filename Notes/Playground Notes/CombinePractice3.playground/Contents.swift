import SwiftUI
import Combine

var cancellables = Set<AnyCancellable>()
let notificationSubject = PassthroughSubject<Notification, Never>() // This is the publisher that relays the notifications generated by NotificationCenter to its subscribers.
let notificationName = UIResponder.keyboardWillShowNotification
let notificationCenter = NotificationCenter.default

notificationCenter.addObserver(forName: notificationName, object: nil, queue: nil) { notification in
    notificationSubject.send(notification)
}

notificationSubject
    .sink(receiveValue: { notification in
        print(notification)
    }).store(in: &cancellables)

notificationCenter.post(Notification(name: notificationName))

//
class Car {
    var kwhInBattery = CurrentValueSubject<Double, Never>(50.0)
    let kwhPerKilometer = 0.14
    func drive(kilometers: Double) {
        let kwhNeeded = kilometers * kwhPerKilometer
        assert(kwhNeeded <= kwhInBattery.value, "Can't make trip, not enough charge in battery")
        kwhInBattery.value -= kwhNeeded
    }
}

let car = Car()
// don't forget to store the AnyCancellable if you're using this in a real app
car.kwhInBattery
    .sink(receiveValue: { newCharge in
        print("The car now has \(newCharge)kwh in its battery")
        //someLabel.text = "The car now has \(newCharge)kwh in its battery"
    })

car.drive(kilometers: 100)

// Comparing using CurrentValueSubject and @Published
class Counter {
    @Published var publishedValue = 1
    var subjectValue = CurrentValueSubject<Int, Never>(1)
}
let c = Counter()
c.$publishedValue.sink(receiveValue: { int in
    print("published", int == c.publishedValue)
})
c.subjectValue.sink(receiveValue: { int in
    print("subject", int == c.subjectValue.value)
})
c.publishedValue = 2
c.subjectValue.value = 2

//@Published value will update its underlying value AFTER emitting the value to its subscribers, the CurrentValueSubject will update its value BEFORE emitting the value to its subscribers.

//@Published can only be used on properties of classes
//CurrentValueSubject is available for both structs and classes
